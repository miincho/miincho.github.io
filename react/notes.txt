imperative programming - writing the steps for how the UI should be updated
but its better to use declarative approach to speed up the process, which is what React is
        
ex1: 
        const header = document.createElement('h1');

        //create new text node for h1 element
        const text = 'Develop. Preview. Ship.';
        const headerContent = document.createTextNode(text);

        //append text to h1 element
        header.appendChild(headerContent);

        //place h1 element inside the div
        app.appendChild(header);

ex2: 
        const root = ReactDOM.createRoot(app);
        root.render(<h1>Develop. Preivew. Ship.</h1>);

this will lead to a syntax error because of the <h1> due to the combination of HTML
and JS being JSX, not valid JavaScript. 
--> the three rules of JSX: https://react.dev/learn/writing-markup-with-jsx#the-rules-of-jsx
--> adding Babel to your project will allow the browser to understand JSX

ex3: 
3 major React core concepts: 
    1. components
        - UIs can be broken down into smaller building blocks called componenets; 
        they allow you to build self-contained, reusable snippeed of contained.
        - Modularity allows code to be more maintainable as it grows --> you can add, 
        update, and delete components w/o touching the rest of the app.
        - it is a function that returns a UI element
    2. props
    3. state